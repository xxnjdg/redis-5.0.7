# Redis configuration file example.
#
# Note that in order to read the configuration file, Redis must be
# started with the file path as first argument:
# 请注意，为了读取配置文件，Redis必须以文件路径作为第一个参数来启动：
# ./redis-server /path/to/redis.conf

# Note on units: when memory size is needed, it is possible to specify
# it in the usual form of 1k 5GB 4M and so forth:
# 关于单位的注意事项：当需要内存大小时，可以以通常的形式1k 5GB 4M来指定它，依此类推：
# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
#单位不区分大小写，因此1GB 1Gb 1gB都相同。
# units are case insensitive so 1GB 1Gb 1gB are all the same.

################################## INCLUDES ###################################

# Include one or more other config files here.  This is useful if you
# have a standard template that goes to all Redis servers but also need
# to customize a few per-server settings.  Include files can include
# other files, so use this wisely.
# 在此处include一个或多个其他配置文件。 如果您具有可用于所有Redis服务器的标准模板，
# 但还需要自定义一些每台服务器设置，则此功能很有用。 包含文件可以包含其他文件，
# 因此请明智地使用它。
#
# Notice option "include" won't be rewritten by command "CONFIG REWRITE"
# from admin or Redis Sentinel. Since Redis always uses the last processed
# line as value of a configuration directive, you'd better put includes
# at the beginning of this file to avoid overwriting config change at runtime.
#
# 注意，选项“ include”将不会被admin或Redis Sentinel中的命令“ CONFIG REWRITE”重写。
#由于Redis始终使用最后处理的行作为配置指令的值，因此最好将include放在此文件的开头，
#以避免在运行时覆盖配置更改。
#
# If instead you are interested in using includes to override configuration
# options, it is better to use include as the last line.
# 相反，如果您有兴趣使用include覆盖配置选项，则最好使用include作为最后一行。
# include /path/to/local.conf
# include /path/to/other.conf

################################## MODULES #####################################

# Load modules at startup. If the server is not able to load modules
# it will abort. It is possible to use multiple loadmodule directives.
# 在启动时加载模块。 如果服务器无法加载模块，它将中止。 可以使用多个loadmodule指令。
# loadmodule /path/to/my_module.so
# loadmodule /path/to/other_module.so

################################## NETWORK #####################################

# By default, if no "bind" configuration directive is specified, Redis listens
# for connections from all the network interfaces available on the server.
# It is possible to listen to just one or multiple selected interfaces using
# the "bind" configuration directive, followed by one or more IP addresses.
# 默认情况下，如果未指定“ bind”配置指令，则Redis将侦听服务器上所有可用网络接口的连接。
# 可以使用“ bind”配置指令仅侦听一个或多个所选接口，然后侦听一个或多个IP地址。
#
# Examples:
#
# bind 192.168.1.100 10.0.0.1
# bind 127.0.0.1 ::1
#
# ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the
# internet, binding to all the interfaces is dangerous and will expose the
# instance to everybody on the internet. So by default we uncomment the
# following bind directive, that will force Redis to listen only into
# the IPv4 loopback interface address (this means Redis will be able to
# accept connections only from clients running into the same computer it
# is running).
# 如果运行Redis的计算机直接暴露于Internet，则绑定到所有接口都是很危险的，
# 并且会将实例暴露给Internet上的所有人。 因此，默认情况下，我们取消注释以下bind指令，
# 这将强制Redis仅侦听IPv4环回接口地址（这意味着Redis将只能接受来自运行在同一台计算机
# 上的客户端的连接）。
#
# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES
# JUST COMMENT THE FOLLOWING LINE.
# 如果您确定要立即侦听所有接口，请仅注意以下几行。
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bind 192.168.100.55

# Protected mode is a layer of security protection, in order to avoid that
# Redis instances left open on the internet are accessed and exploited.
# 保护模式是安全保护的一层，以避免访问和利用Internet上打开的Redis实例。
# When protected mode is on and if:
# 当保护模式打开时，如果：
# 1) The server is not binding explicitly to a set of addresses using the
#    "bind" directive.
# 2) No password is configured.
# 1）服务器没有使用“ bind”指令显式绑定到一组地址。
# 2）没有配置密码。
#
# The server only accepts connections from clients connecting from the
# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain
# sockets.
# 服务器仅接受来自客户端的连接，该客户端从IPv4和IPv6回送地址127.0.0.1
# 和:: 1以及Unix域套接字进行连接。
# By default protected mode is enabled. You should disable it only if
# you are sure you want clients from other hosts to connect to Redis
# even if no authentication is configured, nor a specific set of interfaces
# are explicitly listed using the "bind" directive.
# 默认情况下启用保护模式。 仅当您确定您希望其他主机的客户端连接到Redis
#（即使未配置身份验证），或者使用“ bind”指令未明确列出一组特定的接口时，也应禁用它。
protected-mode no

# Accept connections on the specified port, default is 6379 (IANA #815344).
# If port 0 is specified Redis will not listen on a TCP socket.
# 接受指定端口上的连接，默认值为6379（IANA＃815344）。
# 如果指定了端口0，则Redis将不会在TCP套接字上侦听。
port 6379

# TCP listen() backlog.
# TCP 监听的最大容纳数量
# In high requests-per-second environments you need an high backlog in order
# to avoid slow clients connections issues. Note that the Linux kernel
# will silently truncate it to the value of /proc/sys/net/core/somaxconn so
# make sure to raise both the value of somaxconn and tcp_max_syn_backlog
# in order to get the desired effect.
# 在每秒请求数很高的环境中，您需要大量积压，以避免客户端连接速度慢的问题。
# 请注意，Linux内核将默默地将其缩小为/ proc / sys / net / core / somaxconn的值，
# 因此请确保同时提高somaxconn和tcp_max_syn_backlog的值，以获得所需的效果。
tcp-backlog 511

# Unix socket.
#
# Specify the path for the Unix socket that will be used to listen for
# incoming connections. There is no default, so Redis will not listen
# on a unix socket when not specified.
# 指定用于侦听传入连接的Unix套接字的路径。
# 没有默认值，因此在未指定Redis的情况下，Redis不会在unix套接字上侦听。
# unixsocket /tmp/redis.sock
# unixsocketperm 700

# Close the connection after a client is idle for N seconds (0 to disable)
# 客户端闲置N秒后关闭连接（0禁用）
timeout 0

# TCP keepalive.
# tcp 心跳包。
# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence
# of communication. This is useful for two reasons:
# 如果不为零，请在没有通信的情况下使用SO_KEEPALIVE向客户端发送TCP ACK。
# 这很有用，原因有两个：
#
# 1) Detect dead peers.
# 2) Take the connection alive from the point of view of network
#    equipment in the middle.
# 1）检测死亡的同伴。
# 2）从中间的网络设备的角度来看，保持连接活跃。
#
# On Linux, the specified value (in seconds) is the period used to send ACKs.
# Note that to close the connection the double of the time is needed.
# On other kernels the period depends on the kernel configuration.
#
# 在Linux上，指定的值（以秒为单位）是用于发送ACK的时间段。
# 注意，关闭连接需要两倍的时间。
# 在其他内核上，期限取决于内核配置。
# A reasonable value for this option is 300 seconds, which is the new
# Redis default starting with Redis 3.2.1.
# 此选项的合理值是300秒，这是从Redis 3.2.1开始的新Redis默认值。
tcp-keepalive 300

################################# GENERAL #####################################

# By default Redis does not run as a daemon. Use 'yes' if you need it.
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
# 默认情况下，Redis不会作为守护程序运行。 如果需要，请使用“是”。 请注意，Redis守护进程将在/var/run/redis.pid中写入一个pid文件。
daemonize no

# If you run Redis from upstart or systemd, Redis can interact with your
# supervision tree. Options:
#   supervised no      - no supervision interaction
#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode
#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET
#   supervised auto    - detect upstart or systemd method based on
#                        UPSTART_JOB or NOTIFY_SOCKET environment variables
# Note: these supervision methods only signal "process is ready."
#       They do not enable continuous liveness pings back to your supervisor.
supervised no

# If a pid file is specified, Redis writes it where specified at startup
# and removes it at exit.
# 如果指定了pid文件，则Redis会在启动时将其写入指定位置，然后在退出时将其删除。
# When the server runs non daemonized, no pid file is created if none is
# specified in the configuration. When the server is daemonized, the pid file
# is used even if not specified, defaulting to "/var/run/redis.pid".
# 当服务器以非守护进程运行时，如果在配置中未指定任何pid文件，则不会创建该文件。
# 守护服务器时，即使未指定，也会使用pid文件，默认为“ /var/run/redis.pid”。
# Creating a pid file is best effort: if Redis is not able to create it
# nothing bad happens, the server will start and run normally.
# 创建pid文件是最大的努力：如果Redis无法创建它，则不会发生任何不良情况，服务器将正常启动并运行。
pidfile /var/run/redis_6379.pid

# Specify the server verbosity level.
# This can be one of:
# debug (a lot of information, useful for development/testing)
# verbose (many rarely useful info, but not a mess like the debug level)
# notice (moderately verbose, what you want in production probably)
# warning (only very important / critical messages are logged)
# 指定服务器详细级别。
# 可以是以下之一：
# 调试（很多信息，对于开发/测试很有用）
# 详细（很多很少有用的信息，但不会像调试级别那样混乱）
# 通知（有些冗长，可能是您在生产中想要的）
# 警告（仅记录非常重要/重要的消息）
loglevel debug

# Specify the log file name. Also the empty string can be used to force
# Redis to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
# 指定日志文件名。 空字符串也可以用于强制Redis登录标准输出。
# 请注意，如果您使用标准输出进行日志记录但进行守护进程，则日志将发送到/ dev / null
logfile ""

# To enable logging to the system logger, just set 'syslog-enabled' to yes,
# and optionally update the other syslog parameters to suit your needs.
# 要启用登录到系统记录器的功能，只需将“ syslog-enabled”设置为yes，然后根据需要更新其他syslog参数。
# syslog-enabled no

# Specify the syslog identity.
# 指定系统日志标识。
# syslog-ident redis

# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.
# 指定系统日志工具。 必须是USER或LOCAL0-LOCAL7之间。
# syslog-facility local0

# Set the number of databases. The default database is DB 0, you can select
# a different one on a per-connection basis using SELECT <dbid> where
# dbid is a number between 0 and 'databases'-1
# 设置数据库数。 默认数据库为DB 0，您可以使用SELECT <dbid>在每个连接的基础上选择一个不同的数据库，
# 其中dbid是介于0和'databases'-1之间的数字
databases 16

# By default Redis shows an ASCII art logo only when started to log to the
# standard output and if the standard output is a TTY. Basically this means
# that normally a logo is displayed only in interactive sessions.
#
# However it is possible to force the pre-4.0 behavior and always show a
# ASCII art logo in startup logs by setting the following option to yes.
always-show-logo yes

################################ SNAPSHOTTING  ################################
#
# Save the DB on disk:
# 将数据库保存在磁盘上：
#   save <seconds> <changes>
#
#   Will save the DB if both the given number of seconds and the given
#   number of write operations against the DB occurred.
#   如果既定的秒数和给定的针对数据库的写操作次数均发生，则将保存数据库。
#
#   In the example below the behaviour will be to save:
#   after 900 sec (15 min) if at least 1 key changed
#   after 300 sec (5 min) if at least 10 keys changed
#   after 60 sec if at least 10000 keys changed
#   在下面的示例中，行为将是保存：
#   900秒（15分钟）后，如果至少更改了1个键
#   300秒（5分钟）后，如果至少更改了10个按键
#   60秒后，如果至少更改了10000个键
#
#   Note: you can disable saving completely by commenting out all "save" lines.
#   注意：您可以通过注释掉所有“保存”行来完全禁用保存。
#
#   It is also possible to remove all the previously configured save
#   points by adding a save directive with a single empty string argument
#   like in the following example:
#   也可以通过添加带有单个空字符串参数的save指令来删除所有先前配置的保存点，如以下示例所示：
#
#   save ""

save 900 1
save 300 10
save 60 10000

# By default Redis will stop accepting writes if RDB snapshots are enabled
# (at least one save point) and the latest background save failed.
# This will make the user aware (in a hard way) that data is not persisting
# on disk properly, otherwise chances are that no one will notice and some
# disaster will happen.
# 默认情况下，如果启用了RDB快照（至少一个保存点）并且最新的后台保存失败，则Redis将停止接受写入。
# 这将使用户（以一种困难的方式）意识到数据无法正确地持久存储在磁盘上，否则，可能没人会注意到并且会发生一些灾难。
#
# If the background saving process will start working again Redis will
# automatically allow writes again.
# 如果后台保存过程将再次开始工作，则Redis将自动允许再次写入。
#
# However if you have setup your proper monitoring of the Redis server
# and persistence, you may want to disable this feature so that Redis will
# continue to work as usual even if there are problems with disk,
# permissions, and so forth.
# 但是，如果您设置了对Redis服务器和持久性的适当监视，
# 则可能要禁用此功能，以便即使磁盘，权限等出现问题，Redis仍将照常工作。
stop-writes-on-bgsave-error yes

# Compress string objects using LZF when dump .rdb databases?
# For default that's set to 'yes' as it's almost always a win.
# If you want to save some CPU in the saving child set it to 'no' but
# the dataset will likely be bigger if you have compressible values or keys.
# dump .rdb数据库时使用LZF压缩字符串对象？
#默认情况下将其设置为“是”，因为它几乎总是胜利。
#如果要在保存子项中保存一些CPU，请将其设置为“ no”，但是如果您具有可压缩的值或键，则数据集可能会更大。
rdbcompression yes

# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.
# This makes the format more resistant to corruption but there is a performance
# hit to pay (around 10%) when saving and loading RDB files, so you can disable it
# for maximum performances.
# 从RDB版本5开始，CRC64校验和位于文件末尾。
# 这使该格式更能抵抗损坏，但是在保存和加载RDB文件时会降低性能（约10％），
# 因此可以禁用该格式以获得最佳性能。
#
# RDB files created with checksum disabled have a checksum of zero that will
# tell the loading code to skip the check.
# 在禁用校验和的情况下创建的RDB文件的校验和为零，这将指示加载代码跳过该校验。
rdbchecksum yes

# The filename where to dump the DB 转储数据库的文件名
dbfilename dump.rdb

# The working directory. 工作目录。
#
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
# 数据库将被写入该目录内，文件名使用“ dbfilename”配置指令在上面指定。
#
# The Append Only File will also be created inside this directory.
# 也将在此目录中创建仅附加文件。
#
# Note that you must specify a directory here, not a file name.
# 请注意，您必须在此处指定目录，而不是文件名。
dir ./

################################# REPLICATION #################################

# Master-Replica replication. Use replicaof to make a Redis instance a copy of
# another Redis server. A few things to understand ASAP about Redis replication.
# 主副本复制。 使用copyof来使Redis实例成为另一个Redis服务器的副本。
# 尽快了解有关Redis复制的几件事。
#
#   +------------------+      +---------------+
#   |      Master      | ---> |    Replica    |
#   | (receive writes) |      |  (exact copy) |
#   +------------------+      +---------------+
#
# 1) Redis replication is asynchronous, but you can configure a master to
#    stop accepting writes if it appears to be not connected with at least
#    a given number of replicas.
# 2) Redis replicas are able to perform a partial resynchronization with the
#    master if the replication link is lost for a relatively small amount of
#    time. You may want to configure the replication backlog size (see the next
#    sections of this file) with a sensible value depending on your needs.
# 3) Replication is automatic and does not need user intervention. After a
#    network partition replicas automatically try to reconnect to masters
#    and resynchronize with them.
# 1）Redis复制是异步的，但是您可以将主服务器配置为停止接收写入，如果它似乎未与至少给定数量的副本连接。
#2）如果复制链接在相对短的时间内丢失，则Redis副本能够与主副本执行部分重新同步。
# 您可能需要根据需要将复制积压大小（请参阅此文件的下一部分）配置为合理的值。
#3）复制是自动的，不需要用户干预。 网络分区副本之后，副本会自动尝试重新连接到母版并与它们重新同步。
#
# replicaof <masterip> <masterport>

# If the master is password protected (using the "requirepass" configuration
# directive below) it is possible to tell the replica to authenticate before
# starting the replication synchronization process, otherwise the master will
# refuse the replica request.
# 如果主服务器受密码保护（使用下面的“ requirepass”配置指令），
# 则可以在开始复制同步过程之前告诉副本服务器进行身份验证，否则主服务器将拒绝副本请求。
#
# masterauth <master-password>

# When a replica loses its connection with the master, or when the replication
# is still in progress, the replica can act in two different ways:
#
# 1) if replica-serve-stale-data is set to 'yes' (the default) the replica will
#    still reply to client requests, possibly with out of date data, or the
#    data set may just be empty if this is the first synchronization.
#
# 2) if replica-serve-stale-data is set to 'no' the replica will reply with
#    an error "SYNC with master in progress" to all the kind of commands
#    but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,
#    SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,
#    COMMAND, POST, HOST: and LATENCY.
# 当副本失去与主数据库的连接时，或者仍在进行复制时，副本可以以两种不同的方式起作用：
# 1）如果replica-serve-stale-data设置为“ yes”（默认值），则副本仍将回复客户端请求，
# 可能包含过期数据，或者如果这是第一次同步，则数据集可能为空 。
# 2）如果replica-serve-stale-data设置为“no”，除了以下命令
# INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE,
# CONFIG,SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE,
# PUBLISH, PUBSUB,COMMAND, POST, HOST: and LATENCY可以正常处理
# 其他命令统一回复错误"SYNC with master in progress"
replica-serve-stale-data yes

# You can configure a replica instance to accept writes or not. Writing against
# a replica instance may be useful to store some ephemeral data (because data
# written on a replica will be easily deleted after resync with the master) but
# may also cause problems if clients are writing to it because of a
# misconfiguration.
# 您可以配置副本实例以接受或不接受写入。 针对副本实例进行写操作可能对存储一些临时数据很有用
# （因为与主实例重新同步后，写入副本上的数据很容易删除），但是如果客户端由于配置错误而对其进行写操作，也可能导致问题。
#
# Since Redis 2.6 by default replicas are read-only.
# 由于Redis 2.6默认情况下，副本是只读的。
#
# Note: read only replicas are not designed to be exposed to untrusted clients
# on the internet. It's just a protection layer against misuse of the instance.
# Still a read only replica exports by default all the administrative commands
# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve
# security of read only replicas using 'rename-command' to shadow all the
# administrative / dangerous commands.
# 注意：只读副本并非旨在向Internet上不受信任的客户端公开。 它只是防止实例滥用的保护层。
# 默认情况下，只读副本仍会导出所有管理命令，例如CONFIG，DEBUG等。 在一定程度上，
# 您可以使用'rename-command'遮盖所有管理/危险命令来提高只读副本的安全性。
replica-read-only yes

# Replication SYNC strategy: disk or socket.
# 复制SYNC策略：磁盘或套接字。
#
# -------------------------------------------------------
# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY 警告：DISKLESS目前仅是实验性的
# -------------------------------------------------------
#
# New replicas and reconnecting replicas that are not able to continue the replication
# process just receiving differences, need to do what is called a "full
# synchronization". An RDB file is transmitted from the master to the replicas.
# The transmission can happen in two different ways:
# 仅仅接受差异就无法继续复制过程的新副本和重新连接副本需要进行所谓的“完全同步”。
# RDB文件从主数据库传输到副本数据库。 传输可以通过两种不同的方式进行：
#
# 1) Disk-backed: The Redis master creates a new process that writes the RDB
#                 file on disk. Later the file is transferred by the parent
#                 process to the replicas incrementally.
#                 Redis主服务器创建一个新进程，将RDB文件写入磁盘。 后来，该文件由父进程逐步传输到副本。
# 2) Diskless: The Redis master creates a new process that directly writes the
#              RDB file to replica sockets, without touching the disk at all.
#              Redis主服务器创建一个新进程，该进程将RDB文件直接写入副本套接字，而完全不接触磁盘。
#
# With disk-backed replication, while the RDB file is generated, more replicas
# can be queued and served with the RDB file as soon as the current child producing
# the RDB file finishes its work. With diskless replication instead once
# the transfer starts, new replicas arriving will be queued and a new transfer
# will start when the current one terminates.
# 使用磁盘支持的复制，在生成RDB文件的同时，只要生成RDB文件的当前子级完成工作，
# 就可以将更多副本排入队列并与RDB文件一起使用。 如果使用无盘复制，则一旦传输开始，
# 新的副本将排队，并且当当前副本终止时将开始新的传输。
#
# When diskless replication is used, the master waits a configurable amount of
# time (in seconds) before starting the transfer in the hope that multiple replicas
# will arrive and the transfer can be parallelized.
# 使用无盘复制时，主服务器在开始传输之前会等待一段可配置的时间（以秒为单位），以希望多个副本可以到达并且传输可以并行化。
#
# With slow disks and fast (large bandwidth) networks, diskless replication
# works better.
# 对于慢速磁盘和快速（大带宽）网络，无盘复制效果更好。
repl-diskless-sync no

# When diskless replication is enabled, it is possible to configure the delay
# the server waits in order to spawn the child that transfers the RDB via socket
# to the replicas.
# 启用无盘复制后，可以配置服务器等待的延迟，以生成通过套接字将RDB传输到副本的子代。
#
# This is important since once the transfer starts, it is not possible to serve
# new replicas arriving, that will be queued for the next RDB transfer, so the server
# waits a delay in order to let more replicas arrive.
# 这一点很重要，因为一旦传输开始，就无法为到达的新副本提供服务，
# 新副本将排队等待下一次RDB传输，因此服务器会等待一段时间才能让更多副本到达。
#
# The delay is specified in seconds, and by default is 5 seconds. To disable
# it entirely just set it to 0 seconds and the transfer will start ASAP.
# 延迟以秒为单位指定，默认情况下为5秒。 要完全禁用它，只需将其设置为0秒，传输就会尽快开始。
repl-diskless-sync-delay 5

# Replicas send PINGs to server in a predefined interval. It's possible to change
# this interval with the repl_ping_replica_period option. The default value is 10
# seconds.
# 副本以预定义的时间间隔将PING发送到服务器。 可以使用repl_ping_replica_period选项更改此间隔。
# 默认值为10秒。
#
# repl-ping-replica-period 10

# The following option sets the replication timeout for:
#
# 1) Bulk transfer I/O during SYNC, from the point of view of replica.
# 2) Master timeout from the point of view of replicas (data, pings).
# 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).
# 以下选项为以下项设置复制超时：
#1）从副本的角度来看，在SYNC期间进行批量传输I / O。
#2）从副本（数据，Ping）的角度来看，主超时。
#3）从主服务器角度来看副本超时（REPLCONF ACK ping）。
#
# It is important to make sure that this value is greater than the value
# specified for repl-ping-replica-period otherwise a timeout will be detected
# every time there is low traffic between the master and the replica.
# 重要的是要确保此值大于为repl-ping-replica-period指定的值，
# 否则，每当主服务器和副本之间的通信量较低时，就会检测到超时。
#
# repl-timeout 60

# Disable TCP_NODELAY on the replica socket after SYNC?
# 在同步后禁用副本套接字上的TCP_NODELAY？
#
# If you select "yes" Redis will use a smaller number of TCP packets and
# less bandwidth to send data to replicas. But this can add a delay for
# the data to appear on the replica side, up to 40 milliseconds with
# Linux kernels using a default configuration.
# 如果选择“是”，则Redis将使用更少的TCP数据包和更少的带宽将数据发送到副本。
# 但这会增加数据出现在副本端的延迟，对于使用默认配置的Linux内核，此延迟最多可达40毫秒。
#
# If you select "no" the delay for data to appear on the replica side will
# be reduced but more bandwidth will be used for replication.
# 如果选择“否”，则将减少数据在副本端出现的延迟，但是将使用更多带宽进行复制。
#
# By default we optimize for low latency, but in very high traffic conditions
# or when the master and replicas are many hops away, turning this to "yes" may
# be a good idea. 默认情况下，
# 我们针对低延迟进行优化，但是在流量非常高的情况下，或者当主服务器和副本距离很多跳时，将其设置为“是”可能是个好主意。
repl-disable-tcp-nodelay no

# Set the replication backlog size. The backlog is a buffer that accumulates
# replica data when replicas are disconnected for some time, so that when a replica
# wants to reconnect again, often a full resync is not needed, but a partial
# resync is enough, just passing the portion of data the replica missed while
# disconnected.
# 设置复制积压大小。 待办事项是一个缓冲区，当副本断开连接一段时间后，该缓冲区会累积副本数据，
# 因此当副本想要再次重新连接时，通常不需要完全重新同步，但是部分重新同步就足够了，只需传递副本的部分数据即可 断开连接时错过。
#
# The bigger the replication backlog, the longer the time the replica can be
# disconnected and later be able to perform a partial resynchronization.
# 复制积压越大，副本可以断开连接并稍后能够执行部分重新同步的时间越长。
# The backlog is only allocated once there is at least a replica connected.
# 仅当至少有一个副本连接时，才分配积压。
#
# repl-backlog-size 1mb

# After a master has no longer connected replicas for some time, the backlog
# will be freed. The following option configures the amount of seconds that
# need to elapse, starting from the time the last replica disconnected, for
# the backlog buffer to be freed.
# 主服务器在一段时间内不再连接副本后，积压的事务将被释放。
# 以下选项配置了从断开最后一个副本的时间开始到释放待办事项缓冲区所需的秒数。
#
# Note that replicas never free the backlog for timeout, since they may be
# promoted to masters later, and should be able to correctly "partially
# resynchronize" with the replicas: hence they should always accumulate backlog.
# 请注意，副本永远不会释放积压的超时，因为它们可能会在以后升级为主节点，
# 并且应该能够与副本正确“部分重新同步”：因此，它们应该始终累积积压。
#
# A value of 0 means to never release the backlog.
# 值为0表示从不释放积压。
#
# repl-backlog-ttl 3600

# The replica priority is an integer number published by Redis in the INFO output.
# It is used by Redis Sentinel in order to select a replica to promote into a
# master if the master is no longer working correctly.
# 副本优先级是Redis在INFO输出中发布的整数。 如果主服务器不再正常工作，
# Redis Sentinel会使用它来选择要升级为主服务器的副本。
#
# A replica with a low priority number is considered better for promotion, so
# for instance if there are three replicas with priority 10, 100, 25 Sentinel will
# pick the one with priority 10, that is the lowest.
# 具有较低优先级编号的副本被认为更适合提升，因此，例如，如果存在三个具有10、100、25优先级的副本，
# Sentinel将选择具有最低优先级10的副本。
#
# However a special priority of 0 marks the replica as not able to perform the
# role of master, so a replica with priority of 0 will never be selected by
# Redis Sentinel for promotion.
# 但是，特殊优先级0会将副本标记为不能执行主角色，因此Redis Sentinel永远不会选择优先级为0的副本进行升级。
#
# By default the priority is 100.
replica-priority 100

# It is possible for a master to stop accepting writes if there are less than
# N replicas connected, having a lag less or equal than M seconds.
# 如果连接的副本少于N个，并且延迟小于或等于M秒，则主服务器可能会停止接受写入。
#
# The N replicas need to be in "online" state.
# N个副本需要处于“联机”状态。
#
# The lag in seconds, that must be <= the specified value, is calculated from
# the last ping received from the replica, that is usually sent every second.
# 延迟（以秒为单位）必须小于等于指定值，该延迟是根据从副本接收到的最后ping（通常每秒发送一次）计算得出的。
#
# This option does not GUARANTEE that N replicas will accept the write, but
# will limit the window of exposure for lost writes in case not enough replicas
# are available, to the specified number of seconds.
# 此选项不能保证N个副本将接受写操作，但是如果没有足够的副本可用，
# 则会将丢失写操作的暴露窗口限制为指定的秒数。
#
# For example to require at least 3 replicas with a lag <= 10 seconds use:
# 例如，需要至少3个滞后<= 10秒的副本，请使用：
#
# min-replicas-to-write 3
# min-replicas-max-lag 10
#
# Setting one or the other to 0 disables the feature. 将一个或另一个设置为0将禁用该功能。
#
# By default min-replicas-to-write is set to 0 (feature disabled) and
# min-replicas-max-lag is set to 10.
# 默认情况下，min-replicas-to-write设置为0（禁用功能），min-replicas-max-lag设置为10。

# A Redis master is able to list the address and port of the attached
# replicas in different ways. For example the "INFO replication" section
# offers this information, which is used, among other tools, by
# Redis Sentinel in order to discover replica instances.
# Another place where this info is available is in the output of the
# "ROLE" command of a master.
# Redis主服务器能够以不同方式列出附加副本的地址和端口。
# 例如，“ INFO复制”部分提供了此信息，Redis Sentinel使用此信息以及其他工具来发现副本实例。
# 该信息可用的另一个位置是主服务器的“ ROLE”命令的输出。
#
# The listed IP and address normally reported by a replica is obtained
# in the following way:
# 副本通常报告的列出的IP和地址可以通过以下方式获得：
#
#   IP: The address is auto detected by checking the peer address
#   of the socket used by the replica to connect with the master.
#   IP：通过检查副本用于与主服务器连接的套接字的对等地址来自动检测该地址。
#
#   Port: The port is communicated by the replica during the replication
#   handshake, and is normally the port that the replica is using to
#   listen for connections.
#   端口：端口在复制握手期间由副本进行通信，通常是副本用于侦听连接的端口。
#
# However when port forwarding or Network Address Translation (NAT) is
# used, the replica may be actually reachable via different IP and port
# pairs. The following two options can be used by a replica in order to
# report to its master a specific set of IP and port, so that both INFO
# and ROLE will report those values.
# 但是，当使用端口转发或网络地址转换（NAT）时，实际上可以通过不同的IP和端口对访问该副本。
# 副本可以使用以下两个选项，以便向其主服务器报告特定的IP和端口集，以便INFO和ROLE都将报告这些值。
#
# There is no need to use both the options if you need to override just
# the port or the IP address.
# 如果只需要覆盖端口或IP地址，则无需使用这两个选项。
#
# replica-announce-ip 5.5.5.5
# replica-announce-port 1234

################################## SECURITY ###################################

# Require clients to issue AUTH <PASSWORD> before processing any other
# commands.  This might be useful in environments in which you do not trust
# others with access to the host running redis-server.
# 要求客户端在处理任何其他命令之前发出AUTH <PASSWORD>。
# 在您不信任其他人无法访问运行redis-server的主机的环境中，这可能很有用。
#
# This should stay commented out for backward compatibility and because most
# people do not need auth (e.g. they run their own servers).
# 为了向后兼容，应该保留此注释，因为大多数人不需要身份验证（例如，他们运行自己的服务器）。
#
# Warning: since Redis is pretty fast an outside user can try up to
# 150k passwords per second against a good box. This means that you should
# use a very strong password otherwise it will be very easy to break.
# 警告：由于Redis的速度非常快，外部用户可以在一个不错的机器上每秒尝试多达150k密码。
# 这意味着您应该使用非常安全的密码，否则将很容易破解。
#
# requirepass foobared

# Command renaming. 命令重命名。
#
# It is possible to change the name of dangerous commands in a shared
# environment. For instance the CONFIG command may be renamed into something
# hard to guess so that it will still be available for internal-use tools
# but not available for general clients.
# 可以在共享环境中更改危险命令的名称。 例如，可以将CONFIG命令重命名为一些难以猜测的名称，
# 以便它仍可用于内部使用的工具，但不适用于一般客户。
#
# Example:
#
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
#
# It is also possible to completely kill a command by renaming it into
# an empty string:
# 通过将命令重命名为空字符串也可以完全取消命令：
#
# rename-command CONFIG ""
#
# Please note that changing the name of commands that are logged into the
# AOF file or transmitted to replicas may cause problems.
# 请注意，更改登录到AOF文件或传输到副本的命令的名称可能会导致问题。

################################### CLIENTS ####################################

# Set the max number of connected clients at the same time. By default
# this limit is set to 10000 clients, however if the Redis server is not
# able to configure the process file limit to allow for the specified limit
# the max number of allowed clients is set to the current file limit
# minus 32 (as Redis reserves a few file descriptors for internal uses).
# 同时设置最大连接客户端数。 默认情况下，此限制设置为10000个客户端，
# 但是，如果Redis服务器无法配置进程文件限制以允许指定的限制，
# 则允许的最大客户端数将设置为当前文件限制减去32（因为Redis保留了 内部使用的文件描述符很少）。
#
# Once the limit is reached Redis will close all the new connections sending
# an error 'max number of clients reached'.
# 达到限制后，Redis将关闭所有新连接，并发送错误消息“已达到最大客户端数”。
#
# maxclients 10000

############################## MEMORY MANAGEMENT ################################

# Set a memory usage limit to the specified amount of bytes.
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected (see maxmemory-policy).
# 将内存使用限制设置为指定的字节数。 当达到内存限制时，
# Redis将尝试根据所选的逐出策略来删除密钥（请参见maxmemory-policy）。
#
# If Redis can't remove keys according to the policy, or if the policy is
# set to 'noeviction', Redis will start to reply with errors to commands
# that would use more memory, like SET, LPUSH, and so on, and will continue
# to reply to read-only commands like GET.
# 如果Redis无法根据该策略删除密钥，或者如果该策略设置为“ noeviction”，
# 则Redis将开始以错误的方式答复那些将使用更多内存的命令，例如SET，LPUSH等，
# 并将继续 回复诸如GET之类的只读命令。
#
# This option is usually useful when using Redis as an LRU or LFU cache, or to
# set a hard memory limit for an instance (using the 'noeviction' policy).
# 当将Redis用作LRU或LFU缓存，或为实例设置硬盘限制（使用“ noeviction”策略）时，此选项通常很有用。
#
# WARNING: If you have replicas attached to an instance with maxmemory on,
# the size of the output buffers needed to feed the replicas are subtracted
# from the used memory count, so that network problems / resyncs will
# not trigger a loop where keys are evicted, and in turn the output
# buffer of replicas is full with DELs of keys evicted triggering the deletion
# of more keys, and so forth until the database is completely emptied.
# 警告：如果您将副本连接到实例且maxmemory处于打开状态，
# 则从使用的内存数量中减去提供副本所需的输出缓冲区的大小，
# 以便网络问题/重新同步不会触发收回密钥的循环，并且 反过来，副本的输出缓冲区已满，
# 有被驱逐的DEL引发了更多密钥的删除，依此类推，直到数据库完全清空。
#
# In short... if you have replicas attached it is suggested that you set a lower
# limit for maxmemory so that there is some free RAM on the system for replica
# output buffers (but this is not needed if the policy is 'noeviction').
# 简而言之...如果您附加了副本，建议您为maxmemory设置一个下限，
# 以便系统上有一些可用RAM用于副本输出缓冲区（但是如果策略为'noeviction'，则不需要这样做）。
#
# maxmemory <bytes>

# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
# is reached. You can select among five behaviors:
# MAXMEMORY POLICY：达到maxmemory后，Redis将如何选择要删除的内容。 您可以选择以下五种行为：
#
# volatile-lru -> Evict using approximated LRU among the keys with an expire set.
# allkeys-lru -> Evict any key using approximated LRU.
# volatile-lfu -> Evict using approximated LFU among the keys with an expire set.
# allkeys-lfu -> Evict any key using approximated LFU.
# volatile-random -> Remove a random key among the ones with an expire set.
# allkeys-random -> Remove a random key, any key.
# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)
# noeviction -> Don't evict anything, just return an error on write operations.
# volatile-lru->使用具有到期集的键中的近似LRU进行驱逐。
#allkeys-lru->使用近似的LRU退出任何密钥。
#volatile-lfu->使用具有到期集的密钥中的近似LFU进行驱逐。
#allkeys-lfu->使用近似的LFU退出任何密钥。
#volatile-random->从具有过期集的密钥中删除一个随机密钥。
#allkeys-random->删除随机密钥，任何密钥。
#volatile-ttl->删除最接近到期时间（较小的TTL）的密钥
#noeviction->不要驱逐任何东西，只需在写操作中返回错误。
#
# LRU means Least Recently Used
# LFU means Least Frequently Used
# LRU表示最近最少使用
# LFU表示最少使用
#
# Both LRU, LFU and volatile-ttl are implemented using approximated
# randomized algorithms.
# LRU，LFU和volatile-ttl均使用近似随机算法实现。
#
# Note: with any of the above policies, Redis will return an error on write
#       operations, when there are no suitable keys for eviction.
#       使用上述任何策略，当没有合适的退出键时，Redis将在写入操作中返回错误。
#
#       At the date of writing these commands are: set setnx setex append
#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd
#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby
#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby
#       getset mset msetnx exec sort
#       在撰写本文时，这些命令是：set setnx setex append incr decr rpush lpush
#       rpushx lpushx linsert lset rpoplpush sadd interinterstore sunion
#       sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore
#       hset hsetnx hmset hincrby mcrby deby by
#
# The default is:
#
# maxmemory-policy noeviction

# LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated
# algorithms (in order to save memory), so you can tune it for speed or
# accuracy. For default Redis will check five keys and pick the one that was
# used less recently, you can change the sample size using the following
# configuration directive.
# LRU，LFU和最小TTL算法不是精确算法，而是近似算法（以节省内存），
# 因此您可以针对速度或准确性进行调整。 对于默认情况，Redis将检查五个键并选择最近使用的键，
# 您可以使用以下配置指令更改样本大小。
#
# The default of 5 produces good enough results. 10 Approximates very closely
# true LRU but costs more CPU. 3 is faster but not very accurate.
# 默认值为5会产生足够好的结果。 10非常接近真实的LRU，但是会花费更多的CPU。 3更快，但不是很准确。
#
# maxmemory-samples 5

# Starting from Redis 5, by default a replica will ignore its maxmemory setting
# (unless it is promoted to master after a failover or manually). It means
# that the eviction of keys will be just handled by the master, sending the
# DEL commands to the replica as keys evict in the master side. 从Redis 5开始，
# 默认情况下，副本将忽略其maxmemory设置（除非在故障转移后或手动提升为主副本）。
# 这意味着密钥的移出将仅由主机处理，将DEL命令作为副本在主机侧逐出，将DEL命令发送到副本。
#
# This behavior ensures that masters and replicas stay consistent, and is usually
# what you want, however if your replica is writable, or you want the replica to have
# a different memory setting, and you are sure all the writes performed to the
# replica are idempotent, then you may change this default (but be sure to understand
# what you are doing).
# 此行为可确保主副本和副本始终保持一致，这通常是您想要的，
# 但是，如果副本是可写的，或者您希望副本具有不同的内存设置，并
# 且您确定对副本执行的所有写操作都是幂等的， 那么您可以更改此默认设置（但请务必了解您的操作）。
#
# Note that since the replica by default does not evict, it may end using more
# memory than the one set via maxmemory (there are certain buffers that may
# be larger on the replica, or data structures may sometimes take more memory and so
# forth). So make sure you monitor your replicas and make sure they have enough
# memory to never hit a real out-of-memory condition before the master hits
# the configured maxmemory setting.
# 请注意，由于默认情况下该副本不会退出，因此它可能会比通过maxmemory设置的一组内存占用更多的内存
# （某些缓冲区在副本上可能会更大，或者数据结构有时会占用更多内存，依此类推）。
# 因此，请确保您监视副本并确保副本具有足够的内存，以确保在主副本达到配置的最大内存设置之前，
# 永不达到实际的内存不足状态。
#
# replica-ignore-maxmemory yes

############################# LAZY FREEING ####################################

# Redis has two primitives to delete keys. One is called DEL and is a blocking
# deletion of the object. It means that the server stops processing new commands
# in order to reclaim all the memory associated with an object in a synchronous
# way. If the key deleted is associated with a small object, the time needed
# in order to execute the DEL command is very small and comparable to most other
# O(1) or O(log_N) commands in Redis. However if the key is associated with an
# aggregated value containing millions of elements, the server can block for
# a long time (even seconds) in order to complete the operation.
# Redis有两个删除键的原语。 一种称为DEL，它是对象的阻塞删除。 这意味着服务器停止处理新命令，
# 以便以同步方式回收与对象关联的所有内存。 如果删除的键与一个小对象相关联，
# 则执行DEL命令所需的时间非常短，可与Redis中的大多数其他O（1）或O（log_N）命令相提并论。
# 但是，如果键与包含数百万个元素的聚合值相关联，则服务器可能会阻塞很长时间（甚至几秒钟）以完成操作。
#
# For the above reasons Redis also offers non blocking deletion primitives
# such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and
# FLUSHDB commands, in order to reclaim memory in background. Those commands
# are executed in constant time. Another thread will incrementally free the
# object in the background as fast as possible.
# 由于上述原因，Redis还提供了非阻塞删除原语，例如UNLINK（非阻塞DEL）以及FLUSHALL和FLUSHDB命令的ASYNC选项，
# 以便在后台回收内存。 这些命令在固定时间内执行。 另一个线程将尽可能快地在后台逐渐释放对象。
#
# DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.
# It's up to the design of the application to understand when it is a good
# idea to use one or the other. However the Redis server sometimes has to
# delete keys or flush the whole database as a side effect of other operations.
# Specifically Redis deletes objects independently of a user call in the
# following scenarios:
# 用户可以控制FLUSHALL和FLUSHDB的DEL，UNLINK和ASYNC选项。
# 由应用程序的设计决定何时使用一个或另一个是一个好主意。
# 但是，Redis服务器有时必须删除键或刷新整个数据库，这是其他操作的副作用。
# 特别是在以下情况下，Redis独立于用户调用删除对象：
#
# 1) On eviction, because of the maxmemory and maxmemory policy configurations,
#    in order to make room for new data, without going over the specified
#    memory limit.
# 2) Because of expire: when a key with an associated time to live (see the
#    EXPIRE command) must be deleted from memory.
# 3) Because of a side effect of a command that stores data on a key that may
#    already exist. For example the RENAME command may delete the old key
#    content when it is replaced with another one. Similarly SUNIONSTORE
#    or SORT with STORE option may delete existing keys. The SET command
#    itself removes any old content of the specified key in order to replace
#    it with the specified string.
# 4) During replication, when a replica performs a full resynchronization with
#    its master, the content of the whole database is removed in order to
#    load the RDB file just transferred.
#    1 逐出时，由于maxmemory和maxmemory策略配置，以便在不超过指定的内存限制的情况下为新数据腾出空间。
#    2 因为到期：必须从内存中删除具有相关生存时间的密钥（请参阅EXPIRE命令）。
#    3 由于将数据存储在可能已经存在的键上的命令的副作用。 例如，当RENAME命令被另一旧密钥内容替换时，
#    它可能会删除它。 同样，SUNIONSTORE或SORT with STORE选项可能会删除现有密钥。
#    SET命令本身会删除指定键的所有旧内容，以便将其替换为指定的字符串。
#    4  复制期间，当副本与其主副本执行完全重新同步时，将删除整个数据库的内容，以便加载刚传输的RDB文件。
#
# In all the above cases the default is to delete objects in a blocking way,
# like if DEL was called. However you can configure each case specifically
# in order to instead release memory in a non-blocking way like if UNLINK
# was called, using the following configuration directives:
# 在上述所有情况下，默认设置都是以阻塞方式删除对象，就像调用DEL一样。
# 但是，您可以专门配置每种情况，以便使用以下配置指令以非阻塞方式释放内存，例如调用UNLINK的情况：

lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no

############################## APPEND ONLY MODE ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost (depending on
# the configured save points).
# 默认情况下，Redis异步将数据集转储到磁盘上。 此模式在许多应用程序中已经足够好，
# 但是Redis进程问题或停电可能会导致几分钟的写入丢失（取决于配置的保存点）。
#
# The Append Only File is an alternative persistence mode that provides
# much better durability. For instance using the default data fsync policy
# (see later in the config file) Redis can lose just one second of writes in a
# dramatic event like a server power outage, or a single write if something
# wrong with the Redis process itself happens, but the operating system is
# still running correctly.
# 仅追加文件是一种替代的持久性模式，可提供更好的持久性。 例如，使用默认数据fsync策略
# （请参阅配置文件中的稍后内容），Redis在严重的事件（例如服务器断电）中可能仅损失一秒钟的写操作，
# 如果Redis流程本身发生了问题，则可能丢失一次写操作，但是 操作系统仍在正常运行。
#
# AOF and RDB persistence can be enabled at the same time without problems.
# If the AOF is enabled on startup Redis will load the AOF, that is the file
# with the better durability guarantees.
# 可以同时启用AOF和RDB持久性，而不会出现问题。
# 如果在启动时启用了AOF，则Redis将加载AOF，即该文件具有更好的持久性保证。
#
# Please check http://redis.io/topics/persistence for more information.

appendonly no

# The name of the append only file (default: "appendonly.aof")
# 仅附加文件的名称（默认值：“ appendonly.aof”）

appendfilename "appendonly.aof"

# The fsync() call tells the Operating System to actually write data on disk
# instead of waiting for more data in the output buffer. Some OS will really flush
# data on disk, some other OS will just try to do it ASAP.
# fsync（）调用告诉操作系统将数据实际写在磁盘上，而不是等待输出缓冲区中的更多数据。
# 某些操作系统确实会刷新磁盘上的数据，而另一些操作系统只会尝试尽快完成该操作。
#
# Redis supports three different modes:
# Redis支持三种不同的模式：
#
# no: don't fsync, just let the OS flush the data when it wants. Faster.
# always: fsync after every write to the append only log. Slow, Safest.
# everysec: fsync only one time every second. Compromise.
# 否：不要fsync，只要让OS在需要时刷新数据即可。 快点。 始终：
# 每次写入仅附加日志后，fsync。 慢，最安全。 everysec：每秒仅同步一次fsync。 妥协。
#
# The default is "everysec", as that's usually the right compromise between
# speed and data safety. It's up to you to understand if you can relax this to
# "no" that will let the operating system flush the output buffer when
# it wants, for better performances (but if you can live with the idea of
# some data loss consider the default persistence mode that's snapshotting),
# or on the contrary, use "always" that's very slow but a bit safer than
# everysec.
# 默认值为“ everysec”，因为这通常是速度和数据安全性之间的正确折衷。
# 您可以了解是否可以将其放松为“ no”，这将使操作系统在需要时刷新输出缓冲区，
# 以获得更好的性能（但是如果您可以忍受某些数据丢失的想法，请考虑使用默认的持久性模式
# （即快照），或者相反，请使用“总是”，该速度非常慢，但比秒安全。
#
# More details please check the following article:
# http://antirez.com/post/redis-persistence-demystified.html
#
# If unsure, use "everysec".

# appendfsync always
appendfsync everysec
# appendfsync no

# When the AOF fsync policy is set to always or everysec, and a background
# saving process (a background save or AOF log background rewriting) is
# performing a lot of I/O against the disk, in some Linux configurations
# Redis may block too long on the fsync() call. Note that there is no fix for
# this currently, as even performing fsync in a different thread will block
# our synchronous write(2) call.
# 当AOF fsync策略设置为always或everysec，
# 并且后台保存进程（后台保存或AOF日志后台重写）对磁盘执行大量I / O时，
# 在某些Linux配置中，Redis可能会在磁盘上阻塞太长时间。 fsync（）调用。
# 请注意，目前尚无此修复程序，因为即使在其他线程中执行fsync也将阻止我们的同步write（2）调用。
#
# In order to mitigate this problem it's possible to use the following option
# that will prevent fsync() from being called in the main process while a
# BGSAVE or BGREWRITEAOF is in progress.
# 为了减轻此问题，可以使用以下选项来防止在BGSAVE或BGREWRITEAOF进行时在主进程中调用fsync（）。
#
# This means that while another child is saving, the durability of Redis is
# the same as "appendfsync none". In practical terms, this means that it is
# possible to lose up to 30 seconds of log in the worst scenario (with the
# default Linux settings).
# 这意味着当另一个孩子正在保存时，Redis的持久性与“ appendfsync none”相同。
# 实际上，这意味着在最坏的情况下（使用默认的Linux设置）可能会丢失多达30秒的日志。
#
# If you have latency problems turn this to "yes". Otherwise leave it as
# "no" that is the safest pick from the point of view of durability.
# 如果您有延迟问题，请将其设置为“是”。 否则，从耐用性的角度来看，将其保留为“最不安全”的选择。

no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file.
# Redis is able to automatically rewrite the log file implicitly calling
# BGREWRITEAOF when the AOF log size grows by the specified percentage.
# 自动重写仅附加文件。 当AOF日志大小增加指定的百分比时，Redis可以自动重写日志文件，隐式调用BGREWRITEAOF。
#
# This is how it works: Redis remembers the size of the AOF file after the
# latest rewrite (if no rewrite has happened since the restart, the size of
# the AOF at startup is used).
# 它是这样工作的：Redis会在最近一次重写后记住AOF文件的大小
# （如果自重新启动以来未发生任何重写，则使用启动时AOF的大小）。
#
# This base size is compared to the current size. If the current size is
# bigger than the specified percentage, the rewrite is triggered. Also
# you need to specify a minimal size for the AOF file to be rewritten, this
# is useful to avoid rewriting the AOF file even if the percentage increase
# is reached but it is still pretty small.
# 将此基本大小与当前大小进行比较。 如果当前大小大于指定的百分比，则会触发重写。
# 另外，您需要指定要重写的AOF文件的最小大小，这对于避免重写AOF文件非常有用，
# 即使达到百分比增加，但它仍然很小。
#
# Specify a percentage of zero in order to disable the automatic AOF
# rewrite feature.
# 指定零百分比以禁用自动AOF重写功能。

auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# An AOF file may be found to be truncated at the end during the Redis
# startup process, when the AOF data gets loaded back into memory.
# This may happen when the system where Redis is running
# crashes, especially when an ext4 filesystem is mounted without the
# data=ordered option (however this can't happen when Redis itself
# crashes or aborts but the operating system still works correctly).
# 当AOF数据重新加载到内存中时，在Redis启动过程中可能会发现AOF文件在末尾被截断。
# 当运行Redis的系统崩溃时，尤其是在没有data = ordered选项的情况下挂载ext4文件系统时，
# 可能会发生这种情况（但是，当Redis本身崩溃或中止，但操作系统仍然可以正常运行时，
# 就不会发生这种情况）。
#
# Redis can either exit with an error when this happens, or load as much
# data as possible (the default now) and start if the AOF file is found
# to be truncated at the end. The following option controls this behavior.
# 发生这种情况时，Redis可能会退出并显示错误，也可以加载尽可能多的数据（当前为默认值），
# 如果发现AOF文件最后被截断，则Redis会开始。 以下选项控制此行为。
#
# If aof-load-truncated is set to yes, a truncated AOF file is loaded and
# the Redis server starts emitting a log to inform the user of the event.
# Otherwise if the option is set to no, the server aborts with an error
# and refuses to start. When the option is set to no, the user requires
# to fix the AOF file using the "redis-check-aof" utility before to restart
# the server.
# 如果aof-load-truncated设置为yes，则将加载截短的AOF文件，
# 并且Redis服务器将开始发出日志以将事件通知用户。 否则，如果该选项设置为no，
# 则服务器将中止并显示错误并拒绝启动。 当该选项设置为no时，
# 用户需要在重新启动服务器之前使用“ redis-check-aof”实用程序修复AOF文件。
#
# Note that if the AOF file will be found to be corrupted in the middle
# the server will still exit with an error. This option only applies when
# Redis will try to read more data from the AOF file but not enough bytes
# will be found.
# 请注意，如果在中间发现AOF文件已损坏，则服务器仍将退出并出现错误。
# 仅当Redis尝试从AOF文件中读取更多数据但找不到足够的字节时，此选项才适用。
aof-load-truncated yes

# When rewriting the AOF file, Redis is able to use an RDB preamble in the
# AOF file for faster rewrites and recoveries. When this option is turned
# on the rewritten AOF file is composed of two different stanzas:
# 重写AOF文件时，Redis可以使用AOF文件中的RDB前同步码来更快地进行重写和恢复。
# 启用此选项后，重写的AOF文件由两个不同的节组成：
#
#   [RDB file][AOF tail]
#
# When loading Redis recognizes that the AOF file starts with the "REDIS"
# string and loads the prefixed RDB file, and continues loading the AOF
# tail.
# 加载时，Redis会识别AOF文件以“ REDIS”字符串开头并加载带前缀的RDB文件，然后继续加载AOF尾部。
aof-use-rdb-preamble yes

################################ LUA SCRIPTING  ###############################

# Max execution time of a Lua script in milliseconds.
#
# If the maximum execution time is reached Redis will log that a script is
# still in execution after the maximum allowed time and will start to
# reply to queries with an error.
#
# When a long running script exceeds the maximum execution time only the
# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be
# used to stop a script that did not yet called write commands. The second
# is the only way to shut down the server in the case a write command was
# already issued by the script but the user doesn't want to wait for the natural
# termination of the script.
#
# Set it to 0 or a negative value for unlimited execution without warnings.
# Lua脚本的最大执行时间（以毫秒为单位）。
#如果达到了最大执行时间，Redis将记录在允许的最大时间后脚本仍在执行中，并将开始以错误答复查询。
#如果长时间运行的脚本超过了最大执行时间，则只有“ SCRIPT KILL”和“ SHUTDOWN NOSAVE”命令可用。
# 第一个可用于停止尚未调用写命令的脚本。 第二种是在脚本已发出写命令但用户不想等待脚本自然终止的情况下关闭服务器的唯一方法。
#将其设置为0或负值可无警告地无限执行。
lua-time-limit 5000

################################ REDIS CLUSTER  ###############################

# Normal Redis instances can't be part of a Redis Cluster; only nodes that are
# started as cluster nodes can. In order to start a Redis instance as a
# cluster node enable the cluster support uncommenting the following:
# 普通Redis实例不能属于Redis集群； 只有作为群集节点启动的节点可以。
# 为了将Redis实例作为群集节点启动，请在不注释以下内容的情况下启用群集支持：
#
# cluster-enabled yes

# Every cluster node has a cluster configuration file. This file is not
# intended to be edited by hand. It is created and updated by Redis nodes.
# Every Redis Cluster node requires a different cluster configuration file.
# Make sure that instances running in the same system do not have
# overlapping cluster configuration file names.
# 每个群集节点都有一个群集配置文件。 该文件不适合手工编辑。 它由Redis节点创建和更新。
# 每个Redis群集节点都需要一个不同的群集配置文件。 确保在同一系统上运行的实例没有重叠的集群配置文件名。
#
# cluster-config-file nodes-6379.conf

# Cluster node timeout is the amount of milliseconds a node must be unreachable
# for it to be considered in failure state.
# Most other internal time limits are multiple of the node timeout.
# 群集节点超时是一个节点必须不可达的毫秒数，才能将其视为故障状态。 其他大多数内部时间限制是节点超时的倍数。
#
# cluster-node-timeout 15000

# A replica of a failing master will avoid to start a failover if its data
# looks too old.
# 如果发生故障的主副本的数据看起来太旧，它将避免启动故障转移。
#
# There is no simple way for a replica to actually have an exact measure of
# its "data age", so the following two checks are performed:
# 没有一种简单的方法可以使副本实际上具有其“数据年龄”的准确度量，因此执行以下两项检查：
#
# 1) If there are multiple replicas able to failover, they exchange messages
#    in order to try to give an advantage to the replica with the best
#    replication offset (more data from the master processed).
#    Replicas will try to get their rank by offset, and apply to the start
#    of the failover a delay proportional to their rank.
#    如果存在多个能够进行故障转移的副本，则它们会交换消息，
#    以便尝试利用具有最佳复制偏移量（处理了更多来自主数据库的数据）的副本来获得优势。
#    副本将尝试按偏移量获取其等级，并将与它们的等级成比例的延迟应用于故障转移。
#
# 2) Every single replica computes the time of the last interaction with
#    its master. This can be the last ping or command received (if the master
#    is still in the "connected" state), or the time that elapsed since the
#    disconnection with the master (if the replication link is currently down).
#    If the last interaction is too old, the replica will not try to failover
#    at all.
#    每个单个副本都会计算与其母版之间最后一次交互的时间。
#    这可以是最后收到的ping或命令（如果主服务器仍处于“已连接”状态），
#    也可以是自从与主服务器断开连接以来经过的时间（如果复制链接当前已关闭）。
#    如果最后一次交互太旧，则副本将完全不尝试故障转移。
#
# The point "2" can be tuned by user. Specifically a replica will not perform
# the failover if, since the last interaction with the master, the time
# elapsed is greater than:
# 用户可以调整点“ 2”。 具体而言，如果自从上次与主服务器进行交互以来，
# 经过的时间大于以下时间，则副本将不执行故障转移：
#
#   (node-timeout * replica-validity-factor) + repl-ping-replica-period
#
# So for example if node-timeout is 30 seconds, and the replica-validity-factor
# is 10, and assuming a default repl-ping-replica-period of 10 seconds, the
# replica will not try to failover if it was not able to talk with the master
# for longer than 310 seconds.
# 因此，例如，如果节点超时为30秒，并且副本有效性因子为10，
# 并假设默认的repl-ping-replica-period值为10秒，
# 则副本将无法尝试进行故障转移（如果无法进行对话） 与主机的时间超过310秒。
#
# A large replica-validity-factor may allow replicas with too old data to failover
# a master, while a too small value may prevent the cluster from being able to
# elect a replica at all.
# 较大的副本有效性因子可能会使数据太旧的副本无法对主副本进行故障转移，
# 而值太小可能会使群集根本无法选择副本。
#
# For maximum availability, it is possible to set the replica-validity-factor
# to a value of 0, which means, that replicas will always try to failover the
# master regardless of the last time they interacted with the master.
# (However they'll always try to apply a delay proportional to their
# offset rank).
# 为了获得最大的可用性，可以将副本有效性因子设置为0，
# 这意味着，无论副本上次与主机交互是什么，副本将始终尝试对主机进行故障转移。
# （但是，他们将始终尝试应用与其偏移等级成正比的延迟）。
#
# Zero is the only value able to guarantee that when all the partitions heal
# the cluster will always be able to continue.
# 零是唯一能够确保当所有分区恢复正常后群集将始终能够继续运行的值。
# cluster-replica-validity-factor 10

# Cluster replicas are able to migrate to orphaned masters, that are masters
# that are left without working replicas. This improves the cluster ability
# to resist to failures as otherwise an orphaned master can't be failed over
# in case of failure if it has no working replicas.
# 群集副本能够迁移到孤立的主数据库，即那些没有工作副本的主数据库。
# 这样可以提高群集抵抗故障的能力，否则如果孤立的主节点没有可用的副本，
# 则在发生故障时无法进行故障转移。
#
# Replicas migrate to orphaned masters only if there are still at least a
# given number of other working replicas for their old master. This number
# is the "migration barrier". A migration barrier of 1 means that a replica
# will migrate only if there is at least 1 other working replica for its master
# and so forth. It usually reflects the number of replicas you want for every
# master in your cluster.
# 仅当旧的主副本仍存在至少给定数量的其他工作副本时，副本副本才会迁移到孤立的主副本。
# 这个数字是“移民壁垒”。 迁移屏障为1意味着，仅当副本数据库的主副本中至少有1个其他工作副本时，
# 副本副本才会迁移。 它通常反映出集群中每个主数据库所需的副本数。
#
# Default is 1 (replicas migrate only if their masters remain with at least
# one replica). To disable migration just set it to a very large value.
# A value of 0 can be set but is useful only for debugging and dangerous
# in production.
# 缺省值为1（仅当其主副本保留至少一个副本副本时，副本副本才会迁移）。
# 要禁用迁移，只需将其设置为非常大的值即可。 可以将值设置为0，但仅用于调试和生产危险。
#
# cluster-migration-barrier 1

# By default Redis Cluster nodes stop accepting queries if they detect there
# is at least an hash slot uncovered (no available node is serving it).
# This way if the cluster is partially down (for example a range of hash slots
# are no longer covered) all the cluster becomes, eventually, unavailable.
# It automatically returns available as soon as all the slots are covered again.
# 默认情况下，如果Redis Cluster节点检测到至少发现了一个哈希槽
# （没有可用的节点正在为其提供服务），它们将停止接受查询。 这样，如果群集部分关闭
# （例如，不再覆盖哈希槽的范围），则所有群集最终将变得不可用。 再次覆盖所有插槽后，
# 它将自动返回可用状态。
#
# However sometimes you want the subset of the cluster which is working,
# to continue to accept queries for the part of the key space that is still
# covered. In order to do so, just set the cluster-require-full-coverage
# option to no.
# 但是，有时您希望正在运行的群集子集继续接受对仍覆盖的部分键空间的查询。
# 为此，只需将cluster-require-full-coverage选项设置为no。
#
# cluster-require-full-coverage yes

# This option, when set to yes, prevents replicas from trying to failover its
# master during master failures. However the master can still perform a
# manual failover, if forced to do so.
# 设置为yes时，此选项可防止副本在主服务器发生故障时尝试对其主服务器进行故障转移。
# 但是，主服务器仍然可以执行手动故障转移（如果被迫执行）。
#
# This is useful in different scenarios, especially in the case of multiple
# data center operations, where we want one side to never be promoted if not
# in the case of a total DC failure.
# 这在不同的情况下很有用，尤其是在多个数据中心操作的情况下，
# 在这种情况下，如果整个DC发生故障，我们都希望一侧不被提升。
#
# cluster-replica-no-failover no

# In order to setup your cluster make sure to read the documentation
# available at http://redis.io web site.

########################## CLUSTER DOCKER/NAT support  ########################

# In certain deployments, Redis Cluster nodes address discovery fails, because
# addresses are NAT-ted or because ports are forwarded (the typical case is
# Docker and other containers).
# 在某些部署中，Redis Cluster节点的地址发现失败，
# 这是因为地址经过NAT限制或端口被转发（典型情况是Docker和其他容器）。
#
# In order to make Redis Cluster working in such environments, a static
# configuration where each node knows its public address is needed. The
# following two options are used for this scope, and are:
# 为了使Redis Cluster在这样的环境中工作，需要一个静态配置，其中每个节点都知道其公共地址。
# 以下两个选项用于此范围，分别是：
#
# * cluster-announce-ip
# * cluster-announce-port
# * cluster-announce-bus-port
#
# Each instruct the node about its address, client port, and cluster message
# bus port. The information is then published in the header of the bus packets
# so that other nodes will be able to correctly map the address of the node
# publishing the information.
# 每个命令都向节点指示其地址，客户端端口和群集消息总线端口。
# 然后将信息发布在总线数据包的标头中，以便其他节点将能够正确映射发布信息的节点的地址。
#
# If the above options are not used, the normal Redis Cluster auto-detection
# will be used instead.
# 如果不使用上述选项，则将使用常规的Redis群集自动检测。
#
# Note that when remapped, the bus port may not be at the fixed offset of
# clients port + 10000, so you can specify any port and bus-port depending
# on how they get remapped. If the bus-port is not set, a fixed offset of
# 10000 will be used as usually.
# 请注意，重新映射时，总线端口可能不在客户端端口+ 10000的固定偏移处，
# 因此您可以根据重新映射的方式指定任何端口和总线端口。
# 如果未设置总线端口，通常将使用10000的固定偏移量。
#
# Example:
#
# cluster-announce-ip 10.1.1.5
# cluster-announce-port 6379
# cluster-announce-bus-port 6380

################################## SLOW LOG ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified
# execution time. The execution time does not include the I/O operations
# like talking with the client, sending the reply and so forth,
# but just the time needed to actually execute the command (this is the only
# stage of command execution where the thread is blocked and can not serve
# other requests in the meantime).
# Redis慢日志是一个用于记录超过指定执行时间的查询的系统。
# 执行时间不包括与客户端交谈，发送回复等I / O操作，而是实际执行命令所需的时间
# （这是命令执行的唯一阶段，在该阶段线程被阻塞并且可以 同时不满足其他要求）。
#
# You can configure the slow log with two parameters: one tells Redis
# what is the execution time, in microseconds, to exceed in order for the
# command to get logged, and the other parameter is the length of the
# slow log. When a new command is logged the oldest one is removed from the
# queue of logged commands.
# 您可以使用以下两个参数配置慢速日志：
# 一个告诉Redis为了使命令被记录而超过执行时间（以微秒为单位），
# 另一个参数是慢速日志的长度。 记录新命令时，最旧的命令将从记录的命令队列中删除。

# The following time is expressed in microseconds, so 1000000 is equivalent
# to one second. Note that a negative number disables the slow log, while
# a value of zero forces the logging of every command.
# 以下时间以微秒表示，因此1000000等于一秒。
# 请注意，负数将禁用慢速日志记录，而零值将强制记录每个命令。
slowlog-log-slower-than 10000

# There is no limit to this length. Just be aware that it will consume memory.
# You can reclaim memory used by the slow log with SLOWLOG RESET.
# 该长度没有限制。 请注意，它将消耗内存。 您可以使用SLOWLOG RESET回收慢速日志使用的内存。
slowlog-max-len 128

################################ LATENCY MONITOR ##############################

# The Redis latency monitoring subsystem samples different operations
# at runtime in order to collect data related to possible sources of
# latency of a Redis instance.
#
# Via the LATENCY command this information is available to the user that can
# print graphs and obtain reports.
#
# The system only logs operations that were performed in a time equal or
# greater than the amount of milliseconds specified via the
# latency-monitor-threshold configuration directive. When its value is set
# to zero, the latency monitor is turned off.
#
# By default latency monitoring is disabled since it is mostly not needed
# if you don't have latency issues, and collecting data has a performance
# impact, that while very small, can be measured under big load. Latency
# monitoring can easily be enabled at runtime using the command
# "CONFIG SET latency-monitor-threshold <milliseconds>" if needed.
latency-monitor-threshold 0

############################# EVENT NOTIFICATION ##############################

# Redis can notify Pub/Sub clients about events happening in the key space.
# This feature is documented at http://redis.io/topics/notifications
#
# For instance if keyspace events notification is enabled, and a client
# performs a DEL operation on key "foo" stored in the Database 0, two
# messages will be published via Pub/Sub:
#
# PUBLISH __keyspace@0__:foo del
# PUBLISH __keyevent@0__:del foo
#
# It is possible to select the events that Redis will notify among a set
# of classes. Every class is identified by a single character:
#
#  K     Keyspace events, published with __keyspace@<db>__ prefix.
#  E     Keyevent events, published with __keyevent@<db>__ prefix.
#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
#  $     String commands
#  l     List commands
#  s     Set commands
#  h     Hash commands
#  z     Sorted set commands
#  x     Expired events (events generated every time a key expires)
#  e     Evicted events (events generated when a key is evicted for maxmemory)
#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.
#
#  The "notify-keyspace-events" takes as argument a string that is composed
#  of zero or multiple characters. The empty string means that notifications
#  are disabled.
#
#  Example: to enable list and generic events, from the point of view of the
#           event name, use:
#
#  notify-keyspace-events Elg
#
#  Example 2: to get the stream of the expired keys subscribing to channel
#             name __keyevent@0__:expired use:
#
#  notify-keyspace-events Ex
#
#  By default all notifications are disabled because most users don't need
#  this feature and the feature has some overhead. Note that if you don't
#  specify at least one of K or E, no events will be delivered.
notify-keyspace-events ""

############################### ADVANCED CONFIG ###############################

# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries, and the biggest entry does not exceed a given
# threshold. These thresholds can be configured using the following directives.
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# Lists are also encoded in a special way to save a lot of space.
# The number of entries allowed per internal list node can be specified
# as a fixed maximum size or a maximum number of elements.
# For a fixed maximum size, use -5 through -1, meaning:
# -5: max size: 64 Kb  <-- not recommended for normal workloads
# -4: max size: 32 Kb  <-- not recommended
# -3: max size: 16 Kb  <-- probably not recommended
# -2: max size: 8 Kb   <-- good
# -1: max size: 4 Kb   <-- good
# Positive numbers mean store up to _exactly_ that number of elements
# per list node.
# The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),
# but if your use case is unique, adjust the settings as necessary.
list-max-ziplist-size -2

# Lists may also be compressed.
# Compress depth is the number of quicklist ziplist nodes from *each* side of
# the list to *exclude* from compression.  The head and tail of the list
# are always uncompressed for fast push/pop operations.  Settings are:
# 0: disable all list compression
# 1: depth 1 means "don't start compressing until after 1 node into the list,
#    going from either the head or tail"
#    So: [head]->node->node->...->node->[tail]
#    [head], [tail] will always be uncompressed; inner nodes will compress.
# 2: [head]->[next]->node->node->...->node->[prev]->[tail]
#    2 here means: don't compress head or head->next or tail->prev or tail,
#    but compress all nodes between them.
# 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail]
# etc.
list-compress-depth 0

# Sets have a special encoding in just one case: when a set is composed
# of just strings that happen to be integers in radix 10 in the range
# of 64 bit signed integers.
# The following configuration setting sets the limit in the size of the
# set in order to use this special memory saving encoding.
set-max-intset-entries 512

# Similarly to hashes and lists, sorted sets are also specially encoded in
# order to save a lot of space. This encoding is only used when the length and
# elements of a sorted set are below the following limits:
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog sparse representation bytes limit. The limit includes the
# 16 bytes header. When an HyperLogLog using the sparse representation crosses
# this limit, it is converted into the dense representation.
#
# A value greater than 16000 is totally useless, since at that point the
# dense representation is more memory efficient.
#
# The suggested value is ~ 3000 in order to have the benefits of
# the space efficient encoding without slowing down too much PFADD,
# which is O(N) with the sparse encoding. The value can be raised to
# ~ 10000 when CPU is not a concern, but space is, and the data set is
# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.
hll-sparse-max-bytes 3000

# Streams macro node max size / items. The stream data structure is a radix
# tree of big nodes that encode multiple items inside. Using this configuration
# it is possible to configure how big a single node can be in bytes, and the
# maximum number of items it may contain before switching to a new node when
# appending new stream entries. If any of the following settings are set to
# zero, the limit is ignored, so for instance it is possible to set just a
# max entires limit by setting max-bytes to 0 and max-entries to the desired
# value.
stream-node-max-bytes 4096
stream-node-max-entries 100

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Redis hash table (the one mapping top-level
# keys to values). The hash table implementation Redis uses (see dict.c)
# performs a lazy rehashing: the more operation you run into a hash table
# that is rehashing, the more rehashing "steps" are performed, so if the
# server is idle the rehashing is never complete and some more memory is used
# by the hash table.
#
# The default is to use this millisecond 10 times every second in order to
# actively rehash the main dictionaries, freeing memory when possible.
#
# If unsure:
# use "activerehashing no" if you have hard latency requirements and it is
# not a good thing in your environment that Redis can reply from time to time
# to queries with 2 milliseconds delay.
#
# use "activerehashing yes" if you don't have such hard requirements but
# want to free memory asap when possible.
activerehashing yes

# The client output buffer limits can be used to force disconnection of clients
# that are not reading data from the server fast enough for some reason (a
# common reason is that a Pub/Sub client can't consume messages as fast as the
# publisher can produce them).
#
# The limit can be set differently for the three different classes of clients:
#
# normal -> normal clients including MONITOR clients
# replica  -> replica clients
# pubsub -> clients subscribed to at least one pubsub channel or pattern
#
# The syntax of every client-output-buffer-limit directive is the following:
#
# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
#
# A client is immediately disconnected once the hard limit is reached, or if
# the soft limit is reached and remains reached for the specified number of
# seconds (continuously).
# So for instance if the hard limit is 32 megabytes and the soft limit is
# 16 megabytes / 10 seconds, the client will get disconnected immediately
# if the size of the output buffers reach 32 megabytes, but will also get
# disconnected if the client reaches 16 megabytes and continuously overcomes
# the limit for 10 seconds.
#
# By default normal clients are not limited because they don't receive data
# without asking (in a push way), but just after a request, so only
# asynchronous clients may create a scenario where data is requested faster
# than it can read.
#
# Instead there is a default limit for pubsub and replica clients, since
# subscribers and replicas receive data in a push fashion.
#
# Both the hard or the soft limit can be disabled by setting them to zero.
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Client query buffers accumulate new commands. They are limited to a fixed
# amount by default in order to avoid that a protocol desynchronization (for
# instance due to a bug in the client) will lead to unbound memory usage in
# the query buffer. However you can configure it here if you have very special
# needs, such us huge multi/exec requests or alike.
#
# client-query-buffer-limit 1gb

# In the Redis protocol, bulk requests, that are, elements representing single
# strings, are normally limited ot 512 mb. However you can change this limit
# here.
#
# proto-max-bulk-len 512mb

# Redis calls an internal function to perform many background tasks, like
# closing connections of clients in timeout, purging expired keys that are
# never requested, and so forth.
#
# Not all tasks are performed with the same frequency, but Redis checks for
# tasks to perform according to the specified "hz" value.
#
# By default "hz" is set to 10. Raising the value will use more CPU when
# Redis is idle, but at the same time will make Redis more responsive when
# there are many keys expiring at the same time, and timeouts may be
# handled with more precision.
#
# The range is between 1 and 500, however a value over 100 is usually not
# a good idea. Most users should use the default of 10 and raise this up to
# 100 only in environments where very low latency is required.
hz 10

# Normally it is useful to have an HZ value which is proportional to the
# number of clients connected. This is useful in order, for instance, to
# avoid too many clients are processed for each background task invocation
# in order to avoid latency spikes.
#
# Since the default HZ value by default is conservatively set to 10, Redis
# offers, and enables by default, the ability to use an adaptive HZ value
# which will temporary raise when there are many connected clients.
#
# When dynamic HZ is enabled, the actual configured HZ will be used as
# as a baseline, but multiples of the configured HZ value will be actually
# used as needed once more clients are connected. In this way an idle
# instance will use very little CPU time while a busy instance will be
# more responsive.
dynamic-hz yes

# When a child rewrites the AOF file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated. This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
aof-rewrite-incremental-fsync yes

# When redis saves RDB file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated. This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
rdb-save-incremental-fsync yes

# Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good
# idea to start with the default settings and only change them after investigating
# how to improve the performances and how the keys LFU change over time, which
# is possible to inspect via the OBJECT FREQ command.
#
# There are two tunable parameters in the Redis LFU implementation: the
# counter logarithm factor and the counter decay time. It is important to
# understand what the two parameters mean before changing them.
#
# The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis
# uses a probabilistic increment with logarithmic behavior. Given the value
# of the old counter, when a key is accessed, the counter is incremented in
# this way:
#
# 1. A random number R between 0 and 1 is extracted.
# 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).
# 3. The counter is incremented only if R < P.
#
# The default lfu-log-factor is 10. This is a table of how the frequency
# counter changes with a different number of accesses with different
# logarithmic factors:
#
# +--------+------------+------------+------------+------------+------------+
# | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |
# +--------+------------+------------+------------+------------+------------+
# | 0      | 104        | 255        | 255        | 255        | 255        |
# +--------+------------+------------+------------+------------+------------+
# | 1      | 18         | 49         | 255        | 255        | 255        |
# +--------+------------+------------+------------+------------+------------+
# | 10     | 10         | 18         | 142        | 255        | 255        |
# +--------+------------+------------+------------+------------+------------+
# | 100    | 8          | 11         | 49         | 143        | 255        |
# +--------+------------+------------+------------+------------+------------+
#
# NOTE: The above table was obtained by running the following commands:
#
#   redis-benchmark -n 1000000 incr foo
#   redis-cli object freq foo
#
# NOTE 2: The counter initial value is 5 in order to give new objects a chance
# to accumulate hits.
#
# The counter decay time is the time, in minutes, that must elapse in order
# for the key counter to be divided by two (or decremented if it has a value
# less <= 10).
#
# The default value for the lfu-decay-time is 1. A Special value of 0 means to
# decay the counter every time it happens to be scanned.
#
# lfu-log-factor 10
# lfu-decay-time 1

########################### ACTIVE DEFRAGMENTATION #######################
#
# WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested
# even in production and manually tested by multiple engineers for some
# time.
#
# What is active defragmentation?
# -------------------------------
#
# Active (online) defragmentation allows a Redis server to compact the
# spaces left between small allocations and deallocations of data in memory,
# thus allowing to reclaim back memory.
#
# Fragmentation is a natural process that happens with every allocator (but
# less so with Jemalloc, fortunately) and certain workloads. Normally a server
# restart is needed in order to lower the fragmentation, or at least to flush
# away all the data and create it again. However thanks to this feature
# implemented by Oran Agra for Redis 4.0 this process can happen at runtime
# in an "hot" way, while the server is running.
#
# Basically when the fragmentation is over a certain level (see the
# configuration options below) Redis will start to create new copies of the
# values in contiguous memory regions by exploiting certain specific Jemalloc
# features (in order to understand if an allocation is causing fragmentation
# and to allocate it in a better place), and at the same time, will release the
# old copies of the data. This process, repeated incrementally for all the keys
# will cause the fragmentation to drop back to normal values.
#
# Important things to understand:
#
# 1. This feature is disabled by default, and only works if you compiled Redis
#    to use the copy of Jemalloc we ship with the source code of Redis.
#    This is the default with Linux builds.
#
# 2. You never need to enable this feature if you don't have fragmentation
#    issues.
#
# 3. Once you experience fragmentation, you can enable this feature when
#    needed with the command "CONFIG SET activedefrag yes".
#
# The configuration parameters are able to fine tune the behavior of the
# defragmentation process. If you are not sure about what they mean it is
# a good idea to leave the defaults untouched.

# Enabled active defragmentation
# activedefrag yes

# Minimum amount of fragmentation waste to start active defrag
# active-defrag-ignore-bytes 100mb

# Minimum percentage of fragmentation to start active defrag
# active-defrag-threshold-lower 10

# Maximum percentage of fragmentation at which we use maximum effort
# active-defrag-threshold-upper 100

# Minimal effort for defrag in CPU percentage
# active-defrag-cycle-min 5

# Maximal effort for defrag in CPU percentage
# active-defrag-cycle-max 75

# Maximum number of set/hash/zset/list fields that will be processed from
# the main dictionary scan
# active-defrag-max-scan-fields 1000

